name: Build Node binaries for Linux (arm64)

on:
  workflow_dispatch:
  workflow_call:

jobs:
  # linux:
  #   runs-on: linux-arm64

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target-node: [14, 16, 18, 19]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Build
  #       uses: docker/build-push-action@v2
  #       with:
  #         build-args: |
  #           PKG_FETCH_OPTION_n=node${{ matrix.target-node }}
  #         context: .
  #         file: ./Dockerfile.linux
  #         outputs: type=tar,dest=../out.tar

  #     - name: Extract binaries from Docker image
  #       run: |
  #         tar xvf ../out.tar root/pkg-fetch/dist

  #     - name: Check if binary is compiled
  #       id: check_file
  #       run: |
  #         (test -f root/pkg-fetch/dist/*.sha256sum && echo ::set-output name=EXISTS::true) || echo ::set-output name=EXISTS::false

  #     - uses: actions/upload-artifact@v2
  #       if: steps.check_file.outputs.EXISTS == 'true'
  #       with:
  #         name: node${{ matrix.target-node }}-linux-arm64
  #         path: root/pkg-fetch/dist/*

  aarch64:
    # The host should always be Linux
    runs-on: ubuntu-18.04
    name: Build on ubuntu-18.04 aarch64
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04

          # Set an output parameter `uname` for use in subsequent steps
          run: |
            uname -a
            echo ::set-output name=uname::$(uname -a)

      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"
