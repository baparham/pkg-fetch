name: Build Node binaries for Linux (arm64)

on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - arm-tests

jobs:
  # linux:
  #   runs-on: linux-arm64

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target-node: [14, 16, 18, 19]

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Build
  #       uses: docker/build-push-action@v2
  #       with:
  #         build-args: |
  #           PKG_FETCH_OPTION_n=node${{ matrix.target-node }}
  #         context: .
  #         file: ./Dockerfile.linux
  #         outputs: type=tar,dest=../out.tar

  #     - name: Extract binaries from Docker image
  #       run: |
  #         tar xvf ../out.tar root/pkg-fetch/dist

  #     - name: Check if binary is compiled
  #       id: check_file
  #       run: |
  #         (test -f root/pkg-fetch/dist/*.sha256sum && echo ::set-output name=EXISTS::true) || echo ::set-output name=EXISTS::false

  #     - uses: actions/upload-artifact@v2
  #       if: steps.check_file.outputs.EXISTS == 'true'
  #       with:
  #         name: node${{ matrix.target-node }}-linux-arm64
  #         path: root/pkg-fetch/dist/*

  aarch64:
    # The host should always be Linux
    runs-on: ubuntu-18.04
    name: Build on ubuntu-18.04 aarch64
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04

          dockerRunArgs: |
            --volume "${PWD}:/app"
            --volume "${PWD}/out:/out"

          install: |
            apt-get update
            apt-get install -y curl
            curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
            apt-get update
            apt-get install -y --no-install-recommends wget build-essential git nodejs
            npm install -g yarn

          # Set an output parameter `uname` for use in subsequent steps
          run: |
            CACHE=/out # custom cache folder
            rm -rf $CACHE/built-*
            mkdir -p $CACHE
            export PKG_CACHE_PATH=$CACHE
            export PKG_IGNORE_TAG=true # prevents pkg-fetch to add a tag folder
            ls -laR ./*
            touch ./out/new-file
            touch ./out/new-file2
            yarn --version
            node --version
            yarn install
            yarn build
            yarn start --node-range node18 --output dist

      - name: show new files
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          ls -laR ./out
